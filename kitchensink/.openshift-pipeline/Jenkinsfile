#!/usr/bin/groovy

node('maven') {

    stage 'Checkout'
    checkout scm

    stage 'Build'
    sh 'cd kitchensink && mvn clean compile'

    stage 'Package'
    sh 'cd kitchensink && mvn package'

    stage 'Archive artifact'
    sh 'mkdir -p artifacts/deployments && cp kitchensink/target/*.war artifacts/deployments'
    archive 'kitchensink/target/*.war'

    stage 'Create Image'
    // we need to get newest 'oc' tool until the features are in stable release
    sh 'set -o pipefail && curl -L https://github.com/tnozicka/origin/releases/download/latest/oc.tar.xz | tar -xJ -f -'
    sh "oc login https://kubernetes.default/ --token=\$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) \
           --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt"

    // Prepare the deployments so you can see pipeline in console overview when running for the first time
    sh 'oc process -f kitchensink/.openshift-pipeline/deployment-template.yaml -v "APP_NAME=wildfly-kitchensink-app" | oc apply -f -'

    // Prepare BC and IS
    sh 'oc process -f kitchensink/.openshift-pipeline/build-template.yaml -v "APP_NAME=wildfly-kitchensink-app" | oc apply -f -'
    sh 'oc start-build wildfly-kitchensink-app --from-dir=artifacts/ --follow --wait'

    // "oc start-build" should provide us with image_ref, but let's hack it for now
    sh 'oc get is wildfly-kitchensink-app -o go-template --template=\'{{range .status.tags}}{{if eq .tag "latest"}}{{(index .items 0).dockerImageReference}}{{end}}{{end}}\' > /tmp/pipeline-image_ref'
    def image_ref = readFile '/tmp/pipeline-image_ref'

    stage 'Deploy'
    // Simulate "oc rollout latest" until it gets merged to Origin
    sh "./oc set image dc/wildfly-kitchensink-app wildfly-kitchensink-app=${image_ref}"
    sh './oc deploy wildfly-kitchensink-app --latest --follow'

    sh '''
        function status {
            local version="$(oc get dc wildfly-kitchensink-app -o template --template='{{.status.latestVersion}}' || true)"
            if ! [[ "${version}" =~ ^[0-9]+$ ]]; then
                echo "Unknown" && return;
            fi
            local phase="$(oc get rc wildfly-kitchensink-app-${version} -o template --template='{{index .metadata.annotations "openshift.io/deployment.phase"}}')"
            echo ${phase}
        }
        while [[ "$(status)" == "Running" ]]; do echo "Waiting for deployment to finish" && sleep 1; done
        if [[ "$(status)" != "Complete" ]]; then
            exit 1;
        fi
    '''//.stripMargin()
    // oc rollout is not merged yet; the hack above won't be needed after that
    // sh './oc rollout status wildfly-kitchensink-app'  // to ensure proper return code; will not be nessecary with 'oc rollout latest --follow --wait' if --wait makes it to master

    sh "while [[ (200 != \$(curl --write-out %{http_code} --silent --output /dev/null http://wildfly-kitchensink-app:8080)) ]]; do echo 'Waiting for service to come up...'; sleep 1; done && echo 'Service is up.' "
    // Arquillian test needs access to the wildfly managemant port 9990, hence we need to add Management user.
    sh "PODNAME=\$(oc get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{end}}' --selector='deploymentConfig=wildfly-kitchensink-app') && oc exec \${PODNAME} bash /wildfly/bin/add-user.sh adminUser adminPassword ManagementRealm"

    stage 'Run Integration Tests'
    sh "cp kitchensink/.openshift-pipeline/arquillian.xml kitchensink/src/test/resources/arquillian.xml"
    sh "cd kitchensink && export HOSTNAME=\$(oc get routes -o go-template --template '{{range .items}}{{.spec.host}}{{end}}' --selector='application=wildfly-kitchensink-app') && export MANAGEMENT_ADDRESS=\$(oc get routes -o go-template --template '{{range .items}}{{.spec.host}}{{end}}' --selector='application=management-service') && mvn test -Parq-wildfly-remote"
    archive 'kitchensink/target/surefire-reports/*.xml'
    step([$class: 'JUnitResultArchiver', testResults: 'kitchensink/target/surefire-reports/*.xml'])
}
